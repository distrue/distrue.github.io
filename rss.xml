<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Distrue's blog]]></title><description><![CDATA[기술 블로그 by distrue]]></description><link>https://lumen.netlify.com</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 12 Jan 2021 14:38:01 GMT</lastBuildDate><item><title><![CDATA[토이 프로젝트의 DB 선택(RDB, DocumentDB)]]></title><description><![CDATA[RDB는 관계형 데이터 모델에 기초를 둔 데이터베이스이다. 관계형 데이터 모델은 모든 데이터를 2차원 형태의 테이블로 표현해 처리한다. 각 표현개체에 따라 데이터 간의 상관관계에서 개체간의 관계를 표현한 것이다. 각 Table을 schema를 통해 정의하고, SQL 질의문을 통해 데이터를 처리한다.]]></description><link>https://lumen.netlify.com/posts/toy-project-databse</link><guid isPermaLink="false">https://lumen.netlify.com/posts/toy-project-databse</guid><pubDate>Fri, 17 Jul 2020 22:00:37 GMT</pubDate><content:encoded>&lt;p&gt;RDB는 관계형 데이터 모델에 기초를 둔 데이터베이스이다. 관계형 데이터 모델은 모든 데이터를 2차원 형태의 테이블로 표현해 처리한다. 각 표현개체에 따라 데이터 간의 상관관계에서 개체간의 관계를 표현한 것이다. 각 Table을 schema를 통해 정의하고, SQL 질의문을 통해 데이터를 처리한다.&lt;/p&gt;
&lt;h3 id=&quot;relational-db--nosql&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#relational-db--nosql&quot; aria-label=&quot;relational db  nosql permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Relational DB &amp;#x26; NoSQL&lt;/h3&gt;
&lt;p&gt;최근 대부분의 DB들은 크게 RDB(Relational DB)와 NoSQL(Not only SQL) 분류로 구분된다.&lt;/p&gt;
&lt;p&gt;NoSQL은 기존 관계형 DBMS가 갖고 있는 특성 외에 부가적인 특성을 지원하는 DB를 말한다. 우리에게 가장 익숙한 NoSQL은 DocumentDB(MongoDB가 대표적)과 Key-Value(Redis) 방식 등이 있다. 그 중에서도 이번에는 RDB와 DocumentDB에 대해 자세히 살펴보고자 한다.&lt;/p&gt;
&lt;h3 id=&quot;rdb-vs-documentdb-각각-언제-써야-할까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#rdb-vs-documentdb-%EA%B0%81%EA%B0%81-%EC%96%B8%EC%A0%9C-%EC%8D%A8%EC%95%BC-%ED%95%A0%EA%B9%8C&quot; aria-label=&quot;rdb vs documentdb 각각 언제 써야 할까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RDB vs DocumentDB, 각각 언제 써야 할까?&lt;/h3&gt;
&lt;p&gt;보통 토이 프로젝트를 처음 시작할 때 RDB, DocumentDB 중 하나를 골라 프로젝트를 진행한다. 이전에 프로젝트를 작업할 때도 DoucmentDB (대부분 MongoDB)가 RDB보다 적용이 쉽다고 생각해 큰 고민 없이 선택했는데, 새로 프로젝트를 진행하면서 어떤 DB를 쓸지 고민하던 차 각각 언제 사용이 적합한지 알아보고자 한다.&lt;/p&gt;
&lt;p&gt;DocumentDB은 다음과 같은 특징을 장점으로 보인다.&lt;/p&gt;
&lt;p&gt;스키마없음: Schema를 사용하지 않음, 정형 데이터가 아닌 비정형 데이터 처리가 용이함
관계 없음: 관계형 모델을 사용하지 않음, 테이블 간의 Join 없음 (populate, aggregate 등을 활용)
RDB는 scale-up만 가능, NoSQL은 scale-up/scale-out이 둘 다 가능함&lt;/p&gt;
&lt;p&gt;RDB는 master-slave 모델을 통해 해결함
데이터에 직접 접근하기 때문에 Read-Write의 일반적 동작의 Performance가 RDB보다 빠름
JSON 형태의 직관적인 형태로 개발이 편리
그러나, 각 장점은 상응하는 단점을 갖는다.&lt;/p&gt;
&lt;p&gt;고정된 스키마가 없다는 것은 데이터의 무결성, 정합성이 보장되지 않는다는 것임. 따라서 데이터를 처리할 때 정형 처리가 아닌 반정형/비정형 처리를 해야하며, 처리 시 문제가 발생하지 않도록 적절히 스키마를 설계해야 함 (고정된 스키마가 없는 것이지, 스키마 자체가 없는 것은 아님)
관계가 없기 때문에 데이터 update 시 중복되는 데이터를 찾아 같이 수정해주어야 함. JOIN 명령이 없다는 점에서도 JOIN을 사용할 필요가 없도록 기존 RDB와는 다른 방식으로 Document를 정의해야 함.
Scale-out이 되는 것은 분산환경에 도움이 됨, 그러나 RDB도 클라우드 환경으로 이동하며 확장에 용이해졌음.
빠른 처리, 대용량 처리에는 용이하나, 배포되는 환경에서의 제약을 고려해야 한다. Document DB의 경우 insert/read 형식에는 유리하나 update의 불편함이 있다
새로운 저장방식을 이용해 데이터를 write할 때 논리적으로 memory 공간에 임시로 쓰고, 일정 주기마다 이를 disk로 옮기는 방식을 씀, 따라서 메모리 크기가 DB 성능에 영향을 미치게 됨
위와 같은 차이점에 따라, DocumentDB가 적합한 경우를 각각 나누었다. (RDB는 그 반대)&lt;/p&gt;
&lt;h3 id=&quot;documentdb가-적합한-경우&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#documentdb%EA%B0%80-%EC%A0%81%ED%95%A9%ED%95%9C-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;documentdb가 적합한 경우 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DocumentDB가 적합한 경우&lt;/h3&gt;
&lt;p&gt;Insert하고 Update나 Delete가 잦지 않은 환경 (로그, 세션 등)
트렌섹션의 무결성/정합성이 강조되지 않는 환경 (금융 처리 등)
비정형 데이터의 중요성이 강조될 때 (변경이 잦거나, 커뮤니티, SNS등 테이블을 나누면 transaction 고통이 많을 때)&lt;/p&gt;
&lt;h3 id=&quot;잘못된-db-선택-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%98%EB%AA%BB%EB%90%9C-db-%EC%84%A0%ED%83%9D-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;잘못된 db 선택 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;잘못된 DB 선택 방법&lt;/h3&gt;
&lt;p&gt;대용량 처리나 속도를 생각해서: 다른 해결책들이 충분히 많기도 하고, 컴퓨팅 환경 제한도 더욱 나아지고 있기 때문에 눈에 띄는 차이를 경험하지는 않는다.
스키마 변경이 쉬우니까: DocumentDB는 JOIN이 없는 만큼 복잡한 형태의 Transaction이 적용되는 경우 schema 설계가 어렵다. 대충 짠 schema는 나중에 query 작성 때 큰 어려움을 가져온다…&lt;/p&gt;
&lt;h3 id=&quot;추가로-고려해볼-사항&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B6%94%EA%B0%80%EB%A1%9C-%EA%B3%A0%EB%A0%A4%ED%95%B4%EB%B3%BC-%EC%82%AC%ED%95%AD&quot; aria-label=&quot;추가로 고려해볼 사항 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;추가로 고려해볼 사항&lt;/h3&gt;
&lt;p&gt;배포 환경: 특히 클라우드에 서비스를 배포하는 경우에는 비용적인 측면으로 보면 오히려 serverless DB가 잘 구성되어 있는 RDB가 더 합리적일 수 있다.&lt;/p&gt;</content:encoded></item></channel></rss>